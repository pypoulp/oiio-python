--- CMakeLists.txt
+++ CMakeLists.txt
@@ -42,7 +42,6 @@
 
 # Set up module path for our own cmake modules and add some esential ones
 list (APPEND CMAKE_MODULE_PATH
-      "${PROJECT_SOURCE_DIR}/src/cmake/modules"
       "${PROJECT_SOURCE_DIR}/src/cmake")
 
 # Utilities
@@ -233,7 +232,6 @@
     add_subdirectory (src/iinfo)
     add_subdirectory (src/maketx)
     add_subdirectory (src/oiiotool)
-    add_subdirectory (src/testtex)
     add_subdirectory (src/iv)
 endif ()
 
@@ -246,11 +244,7 @@
     endforeach ()
 endif ()
 
-if (USE_PYTHON AND Python3_Development_FOUND AND NOT BUILD_OIIOUTIL_ONLY)
-    add_subdirectory (src/python)
-else ()
-    message (STATUS "Not building Python bindings: USE_PYTHON=${USE_PYTHON}, Python3_Development_FOUND=${Python3_Development_FOUND}")
-endif ()
+add_subdirectory (src/python)
 
 add_subdirectory (src/include)
 if (BUILD_DOCS)
--- src/cmake/externalpackages.cmake
+++ src/cmake/externalpackages.cmake
@@ -50,16 +50,26 @@
 endif ()
 
 # IlmBase & OpenEXR
-checked_find_package (Imath REQUIRED
+checked_find_package (Imath CONFIG REQUIRED
     VERSION_MIN 3.1
     PRINT IMATH_INCLUDES OPENEXR_INCLUDES Imath_VERSION
 )
 
-checked_find_package (OpenEXR REQUIRED
+checked_find_package (OpenEXR CONFIG REQUIRED
     VERSION_MIN 3.1
     NO_FP_RANGE_CHECK
     PRINT IMATH_INCLUDES OPENEXR_INCLUDES Imath_VERSION
     )
+
+set (OPENEXR_VERSION ${OpenEXR_VERSION})
+get_target_property(IMATH_INCLUDES Imath::Imath INTERFACE_INCLUDE_DIRECTORIES)
+get_target_property(IMATH_LIBRARY Imath::Imath INTERFACE_LINK_LIBRARIES)
+get_target_property(OPENEXR_IEX_LIBRARY OpenEXR::Iex  INTERFACE_LINK_LIBRARIES)
+get_target_property(OPENEXR_ILMTHREAD_LIBRARY OpenEXR::IlmThread INTERFACE_LINK_LIBRARIES)
+get_target_property(OPENEXR_INCLUDES OpenEXR::OpenEXR  INTERFACE_INCLUDE_DIRECTORIES)
+get_target_property(OPENEXR_ILMIMF_LIBRARY OpenEXR::OpenEXR  INTERFACE_LINK_LIBRARIES)
+set (OPENEXR_LIBRARIES ${OPENEXR_ILMIMF_LIBRARY} ${OPENEXR_IEX_LIBRARY} ${OPENEXR_ILMTHREAD_LIBRARY})
+set (OPENEXR_FOUND true)
 
 # Force Imath includes to be before everything else to ensure that we have
 # the right Imath/OpenEXR version, not some older version in the system
@@ -87,7 +97,7 @@
 
 
 # Ultra HDR
-checked_find_package (libuhdr)
+checked_find_package (libuhdr CONFIG REQUIRED)
 
 
 checked_find_package (TIFF REQUIRED
@@ -96,7 +106,7 @@
 
 # JPEG XL
 option (USE_JXL "Enable JPEG XL support" ON)
-checked_find_package (JXL
+checked_find_package (libjxl
                       VERSION_MIN 0.10.1
                       DEFINITIONS USE_JXL=1)
 
@@ -148,7 +158,7 @@
 
 # Intel TBB
 set (TBB_USE_DEBUG_BUILD OFF)
-checked_find_package (TBB 2017
+checked_find_package (TBB REQUIRED
                       SETVARIABLES OIIO_TBB
                       PREFER_CONFIG)
 
@@ -164,7 +174,7 @@
                       RECOMMEND_MIN 1.16
                       RECOMMEND_MIN_REASON "for orientation support")
 
-checked_find_package (LibRaw
+checked_find_package (LibRaw REQUIRED
                       VERSION_MIN 0.20.0
                       PRINT LibRaw_r_LIBRARIES)
 
@@ -221,18 +231,18 @@
 
 
 # Tessil/robin-map
-checked_find_package (Robinmap REQUIRED
+checked_find_package (tsl-robin-map REQUIRED
                       VERSION_MIN 1.2.0
                       BUILD_LOCAL missing
                      )
+set (ROBINMAP_INCLUDES ${tsl-robin-map_INCLUDE_DIRS})
 
 # fmtlib
-option (OIIO_INTERNALIZE_FMT "Copy fmt headers into <install>/include/OpenImageIO/detail/fmt" ON)
+option (OIIO_INTERNALIZE_FMT "Copy fmt headers into <install>/include/OpenImageIO/detail/fmt" OFF)
 checked_find_package (fmt REQUIRED
                       VERSION_MIN 7.0
-                      BUILD_LOCAL missing
                      )
-get_target_property(FMT_INCLUDE_DIR fmt::fmt-header-only INTERFACE_INCLUDE_DIRECTORIES)
+get_target_property(FMT_INCLUDE_DIR fmt::fmt INTERFACE_INCLUDE_DIRECTORIES)
 
 
 ###########################################################################
--- src/cmake/pythonutils.cmake
+++ src/cmake/pythonutils.cmake
@@ -10,8 +10,10 @@
 set (PYMODULE_SUFFIX "" CACHE STRING "Suffix to add to Python module init namespace")
 if (WIN32)
     set (PYLIB_LIB_TYPE SHARED CACHE STRING "Type of library to build for python module (MODULE or SHARED)")
+    set (PY_DEV_REQUIRED Development)
 else ()
     set (PYLIB_LIB_TYPE MODULE CACHE STRING "Type of library to build for python module (MODULE or SHARED)")
+    set (PY_DEV_REQUIRED Development.Module)
 endif ()
 
 
@@ -35,7 +37,7 @@
     checked_find_package (Python3 ${PYTHON_VERSION}
                           ${_req}
                           VERSION_MIN 3.7
-                          COMPONENTS Interpreter Development
+                          COMPONENTS Interpreter ${PY_DEV_REQUIRED}
                           PRINT Python3_VERSION Python3_EXECUTABLE
                                 Python3_LIBRARIES
                                 Python3_Development_FOUND
@@ -50,9 +52,8 @@
     set (PythonInterp3_FIND_VERSION PYTHON_VERSION_FOUND)
     set (PythonInterp3_FIND_VERSION_MAJOR ${Python3_VERSION_MAJOR})
 
-    if (NOT DEFINED PYTHON_SITE_DIR)
-        set (PYTHON_SITE_DIR "${CMAKE_INSTALL_LIBDIR}/python${PYTHON_VERSION_FOUND}/site-packages/OpenImageIO")
-    endif ()
+    set (PYTHON_SITE_DIR "${CMAKE_INSTALL_LIBDIR}/python${PYTHON_VERSION_FOUND}/site-packages/OpenImageIO")
+    
     message (VERBOSE "    Python site packages dir ${PYTHON_SITE_DIR}")
     message (VERBOSE "    Python to include 'lib' prefix: ${PYLIB_LIB_PREFIX}")
     message (VERBOSE "    Python to include SO version: ${PYLIB_INCLUDE_SONAME}")
@@ -144,4 +145,3 @@
     install(FILES __init__.py DESTINATION ${PYTHON_SITE_DIR})
 
 endmacro ()
-
--- src/heif.imageio/CMakeLists.txt
+++ src/heif.imageio/CMakeLists.txt
@@ -3,31 +3,9 @@
 # https://github.com/AcademySoftwareFoundation/OpenImageIO
 
 if (Libheif_FOUND)
-    if (LINKSTATIC)
-        set (_static_suffixes .lib .a)    
-        set (_static_libraries_found 0)
-
-        foreach (_libeheif_library IN LISTS LIBHEIF_LIBRARIES)
-            get_filename_component (_ext ${_libeheif_library} LAST_EXT)
-            list (FIND _static_suffixes ${_ext} _index)
-            if (${_index} GREATER -1)
-                MATH (EXPR _static_libraries_found "${static_libraries_found}+1")
-            endif()
-        endforeach()
-
-        if (${_static_libraries_found} GREATER 0)
-            message (STATUS "${ColorYellow}")
-            message (STATUS "You are linking OpenImageIO against a static version of libheif, which is LGPL")
-            message (STATUS "licensed. If you intend to redistribute this build of OpenImageIO, we recommend")
-            message (STATUS "that you review the libheif license terms, or you may wish to switch to using a")
-            message (STATUS "dynamically-linked libheif.")
-            message ("${ColorReset}")
-        endif()
-    endif()
 
     add_oiio_plugin (heifinput.cpp heifoutput.cpp
-                     INCLUDE_DIRS ${LIBHEIF_INCLUDES}
-                     LINK_LIBRARIES ${LIBHEIF_LIBRARIES}
+                     LINK_LIBRARIES libheif::heif
                      DEFINITIONS "USE_HEIF=1")
 else ()
     message (WARNING "heif plugin will not be built")
--- src/include/CMakeLists.txt
+++ src/include/CMakeLists.txt
@@ -49,7 +49,7 @@
          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/detail
          COMPONENT developer)
 
-if (OIIO_INTERNALIZE_FMT OR fmt_LOCAL_BUILD)
+if (0)
     set (fmt_headers_base_names)
     foreach (header_name core.h format-inl.h format.h ostream.h printf.h
              std.h base.h chrono.h)
--- src/jpeg.imageio/CMakeLists.txt
+++ src/jpeg.imageio/CMakeLists.txt
@@ -15,6 +15,6 @@
                  LINK_LIBRARIES
                      $<TARGET_NAME_IF_EXISTS:libjpeg-turbo::jpeg>
                      $<TARGET_NAME_IF_EXISTS:JPEG::JPEG>
-                     ${LIBUHDR_LIBRARY}
+                     libuhdr::libuhdr
                  DEFINITIONS "${UHDR_DEFS}"
                  )
--- src/jpeg2000.imageio/CMakeLists.txt
+++ src/jpeg2000.imageio/CMakeLists.txt
@@ -5,7 +5,7 @@
 if (OPENJPEG_FOUND)
     add_oiio_plugin (jpeg2000input.cpp jpeg2000output.cpp
                      INCLUDE_DIRS ${OPENJPEG_INCLUDES}
-                     LINK_LIBRARIES ${OPENJPEG_LIBRARIES}
+                     LINK_LIBRARIES openjp2
                      DEFINITIONS "USE_OPENJPEG")
 else()
     message (WARNING "Jpeg-2000 plugin will not be built")
--- src/jpegxl.imageio/CMakeLists.txt
+++ src/jpegxl.imageio/CMakeLists.txt
@@ -2,11 +2,7 @@
 # SPDX-License-Identifier: Apache-2.0
 # https://github.com/AcademySoftwareFoundation/OpenImageIO
 
-if (JXL_FOUND)
-    add_oiio_plugin (jxlinput.cpp jxloutput.cpp
-                     INCLUDE_DIRS ${JXL_INCLUDE_DIRS}
-                     LINK_LIBRARIES ${JXL_LIBRARIES}
-                     DEFINITIONS "USE_JXL")
-else()
-    message (WARNING "JPEG XL plugin will not be built")
-endif()
+add_oiio_plugin (jxlinput.cpp jxloutput.cpp
+                    INCLUDE_DIRS ${libjxl_INCLUDE_DIRS}
+                    LINK_LIBRARIES libjxl::libjxl
+                    DEFINITIONS "USE_JXL")
--- src/libOpenImageIO/CMakeLists.txt
+++ src/libOpenImageIO/CMakeLists.txt
@@ -161,12 +161,23 @@
             OpenColorIO::OpenColorIO
             $<TARGET_NAME_IF_EXISTS:OpenColorIO::OpenColorIOHeaders>
             $<TARGET_NAME_IF_EXISTS:pugixml::pugixml>
-            $<TARGET_NAME_IF_EXISTS:TBB::tbb>
+            $<TARGET_NAME_IF_EXISTS:onetbb::onetbb>
             $<TARGET_NAME_IF_EXISTS:Freetype::Freetype>
             ${BZIP2_LIBRARIES}
             ZLIB::ZLIB
+            tsl::robin_map
             ${CMAKE_DL_LIBS}
         )
+
+if (USE_OPENCV)
+    target_link_libraries (OpenImageIO PRIVATE opencv::opencv_core
+                                               opencv::opencv_imgproc
+                                               opencv::opencv_videoio)
+endif()
+
+if (USE_FREETYPE)
+    target_link_libraries (OpenImageIO PRIVATE Freetype::Freetype)
+endif()
 
 if (WIN32)
     target_link_libraries (OpenImageIO PRIVATE psapi)
--- src/libutil/CMakeLists.txt
+++ src/libutil/CMakeLists.txt
@@ -58,8 +58,9 @@
                 ${GCC_ATOMIC_LIBRARIES}
                 ${OPENIMAGEIO_IMATH_DEPENDENCY_VISIBILITY}
                 ${OPENIMAGEIO_IMATH_TARGETS}
+                fmt::fmt
             PRIVATE
-                $<TARGET_NAME_IF_EXISTS:TBB::tbb>
+                $<TARGET_NAME_IF_EXISTS:onetbb::onetbb>
                 ${CMAKE_DL_LIBS}
             )
 
@@ -69,12 +70,7 @@
                                PRIVATE stdc++_libbacktrace)
     endif ()
 
-    if (OIIO_INTERNALIZE_FMT OR fmt_LOCAL_BUILD)
-        add_dependencies(${targetname} fmt_internal_target)
-    else ()
-        target_link_libraries (${targetname}
-                               PUBLIC fmt::fmt-header-only)
-    endif ()
+    target_link_libraries (${targetname} PUBLIC fmt::fmt)
 
     if (WIN32)
         target_compile_definitions(${targetname} PRIVATE
--- src/openvdb.imageio/CMakeLists.txt
+++ src/openvdb.imageio/CMakeLists.txt
@@ -6,5 +6,5 @@
     add_oiio_plugin (openvdbinput.cpp
                      INCLUDE_DIRS  ${OPENVDB_INCLUDES} ${TBB_INCLUDE_DIRS}
                      LINK_LIBRARIES  ${OPENVDB_LIBRARIES}
-                                     $<TARGET_NAME_IF_EXISTS:TBB::tbb>)
+                                     $<TARGET_NAME_IF_EXISTS:onetbb::onetbb>)
 endif()
--- src/ptex.imageio/CMakeLists.txt
+++ src/ptex.imageio/CMakeLists.txt
@@ -9,5 +9,6 @@
     endif()
     add_oiio_plugin (ptexinput.cpp
                      LINK_LIBRARIES ${ptex_target} ZLIB::ZLIB
+                     INCLUDE_DIRS ${ptex_INCLUDE_DIRS}
                      DEFINITIONS "USE_PTEX")
 endif ()
--- src/raw.imageio/CMakeLists.txt
+++ src/raw.imageio/CMakeLists.txt
@@ -2,12 +2,7 @@
 # SPDX-License-Identifier: Apache-2.0
 # https://github.com/AcademySoftwareFoundation/OpenImageIO
 
-if (LIBRAW_FOUND)
-    add_oiio_plugin (rawinput.cpp
-                     INCLUDE_DIRS ${LibRaw_INCLUDE_DIR}
-                     LINK_LIBRARIES ${LibRaw_r_LIBRARIES}
-                     COMPILE_OPTIONS ${LibRaw_r_DEFINITIONS}
-                     DEFINITIONS "USE_LIBRAW=1")
-else ()
-    message (WARNING "Raw plugin will not be built")
-endif ()
+add_oiio_plugin (rawinput.cpp
+                    INCLUDE_DIRS ${libraw_INCLUDE_DIR}
+                    LINK_LIBRARIES libraw::libraw
+                    DEFINITIONS "USE_LIBRAW=1" ${LibRaw_r_DEFINITIONS})